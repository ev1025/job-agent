name: Deploy to Cloud Run Job

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로 실행

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  JOB_NAME: job-crawler-saramin

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - Check files and create Dockerfile if missing
        run: |
          echo "=== Current directory ==="
          pwd
          echo "=== List all files ==="
          ls -lR
          echo "=== Look for Dockerfile ==="
          find . -name "Dockerfile*" -type f
          echo "=== Check if Dockerfile exists ==="
          if [ ! -f "Dockerfile" ]; then
            echo "Dockerfile not found! Creating a basic one..."
            cat > Dockerfile << 'EOF'
          FROM python:3.11-slim
          
          WORKDIR /app
          
          RUN apt-get update && apt-get install -y \
              gcc \
              && rm -rf /var/lib/apt/lists/*
          
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          
          COPY . .
          
          EXPOSE 8080
          
          CMD ["python", "main.py"]
          EOF
            echo "Created basic Dockerfile"
          else
            echo "Dockerfile found!"
            cat Dockerfile
          fi

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |-
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repository/${{ env.JOB_NAME }}:${{ github.sha }} .
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repository/${{ env.JOB_NAME }}:${{ github.sha }}
          
      - name: Deploy Cloud Run Job
        run: |-
          gcloud run jobs deploy ${{ env.JOB_NAME }} \
            --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repository/${{ env.JOB_NAME }}:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --set-env-vars=DB_HOST=${{ secrets.DB_HOST }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_PORT=${{ secrets.DB_PORT }} \
            --memory=1Gi \
            --cpu=1 \
            --task-timeout=7200 \
            --max-retries=3 \
            --parallelism=1 \
            --wait

      - name: Check Job Execution Logs (if failed)
        if: failure()
        run: |-
          echo "Getting latest execution..."
          EXECUTION_NAME=$(gcloud run jobs executions list --job=${{ env.JOB_NAME }} --region=${{ env.GCP_REGION }} --limit=1 --format="value(metadata.name)")
          echo "Latest execution: $EXECUTION_NAME"
          
          echo "Getting execution logs..."
          gcloud run jobs executions describe $EXECUTION_NAME --region=${{ env.GCP_REGION }}
          
          echo "Getting container logs..."
          gcloud logging read "resource.type=cloud_run_job AND resource.labels.job_name=${{ env.JOB_NAME }}" --limit=50 --format="table(timestamp,textPayload)" --freshness=1h